{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Nd5me9KI3_klvMG6fvbNXWOLG9Ue3E4v","timestamp":1757238240241},{"file_id":"1r1faap6VWvwA2ZzkuO9unL-kA5vBi3MY","timestamp":1757236239698}],"authorship_tag":"ABX9TyMuvfM0a+eiEqhDPf0+iMdc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["#!/usr/bin/env python3\n","\"\"\"\n","Library Management System (Console App)\n","- Pure Python, single file\n","- Persists data to data/library.json\n","- Features: add/list/search books & members, issue/return, stats, simple reports\n","\n","Run: python library_app.py\n","\"\"\"\n","\n","from __future__ import annotations\n","from dataclasses import dataclass, asdict\n","from typing import List, Optional, Dict, Any\n","import json, os, sys\n","from datetime import datetime, timedelta\n","from uuid import uuid4\n","\n","# --------------------- Models ---------------------\n","\n","@dataclass\n","class Book:\n","    id: str\n","    title: str\n","    author: str\n","    isbn: str\n","    copies: int = 1\n","\n","@dataclass\n","class Member:\n","    id: str\n","    name: str\n","    email: str\n","\n","@dataclass\n","class Loan:\n","    id: str\n","    book_id: str\n","    member_id: str\n","    date_borrowed: str  # ISO date\n","    due_date: str       # ISO date\n","    returned_date: Optional[str] = None\n","\n","# --------------------- Storage ---------------------\n","\n","class Storage:\n","    def __init__(self, path: str = \"data/library.json\"):\n","        self.path = path\n","        os.makedirs(os.path.dirname(path), exist_ok=True)\n","        if not os.path.exists(path):\n","            self._write({\"books\": [], \"members\": [], \"loans\": []})\n","        self.data = self._read()\n","\n","    def _read(self) -> Dict[str, Any]:\n","        try:\n","            with open(self.path, \"r\", encoding=\"utf-8\") as f:\n","                return json.load(f)\n","        except (json.JSONDecodeError, FileNotFoundError):\n","            return {\"books\": [], \"members\": [], \"loans\": []}\n","\n","    def _write(self, data: Dict[str, Any]) -> None:\n","        with open(self.path, \"w\", encoding=\"utf-8\") as f:\n","            json.dump(data, f, indent=2)\n","\n","    def save_all(self, books: List[Book], members: List[Member], loans: List[Loan]) -> None:\n","        self._write({\n","            \"books\": [asdict(b) for b in books],\n","            \"members\": [asdict(m) for m in members],\n","            \"loans\": [asdict(l) for l in loans],\n","        })\n","\n","# --------------------- Core Library ---------------------\n","\n","class Library:\n","    def __init__(self, storage: Storage):\n","        self.storage = storage\n","        self.books: List[Book] = [Book(**b) for b in storage.data.get(\"books\", [])]\n","        self.members: List[Member] = [Member(**m) for m in storage.data.get(\"members\", [])]\n","        self.loans: List[Loan] = [Loan(**l) for l in storage.data.get(\"loans\", [])]\n","\n","    # ---- helpers ----\n","    @staticmethod\n","    def _today() -> str:\n","        return datetime.now().date().isoformat()\n","\n","    @staticmethod\n","    def _in_days(days: int) -> str:\n","        return (datetime.now().date() + timedelta(days=days)).isoformat()\n","\n","    def _active_loans_for_book(self, book_id: str) -> int:\n","        return sum(1 for l in self.loans if l.book_id == book_id and l.returned_date is None)\n","\n","    def _book_available(self, book_id: str) -> bool:\n","        b = self.get_book(book_id)\n","        if not b: return False\n","        return self._active_loans_for_book(book_id) < b.copies\n","\n","    def _persist(self):\n","        self.storage.save_all(self.books, self.members, self.loans)\n","\n","    # ---- Books ----\n","    def add_book(self, title: str, author: str, isbn: str, copies: int = 1) -> Book:\n","        if copies < 1: raise ValueError(\"Copies must be >= 1\")\n","        b = Book(id=str(uuid4()), title=title.strip(), author=author.strip(), isbn=isbn.strip(), copies=int(copies))\n","        self.books.insert(0, b)\n","        self._persist()\n","        return b\n","\n","    def remove_book(self, book_id: str) -> bool:\n","        if any(l.book_id == book_id and l.returned_date is None for l in self.loans):\n","            raise ValueError(\"Cannot delete book with active loans.\")\n","        before = len(self.books)\n","        self.books = [b for b in self.books if b.id != book_id]\n","        # also remove historical loans for tidiness\n","        self.loans = [l for l in self.loans if l.book_id != book_id]\n","        self._persist()\n","        return len(self.books) < before\n","\n","    def list_books(self) -> List[Book]:\n","        return list(self.books)\n","\n","    def search_books(self, q: str) -> List[Book]:\n","        q = q.lower().strip()\n","        return [b for b in self.books if q in b.title.lower() or q in b.author.lower() or q in b.isbn.lower()]\n","\n","    def get_book(self, book_id: str) -> Optional[Book]:\n","        return next((b for b in self.books if b.id == book_id), None)\n","\n","    # ---- Members ----\n","    def add_member(self, name: str, email: str) -> Member:\n","        m = Member(id=str(uuid4()), name=name.strip(), email=email.strip())\n","        self.members.insert(0, m)\n","        self._persist()\n","        return m\n","\n","    def remove_member(self, member_id: str) -> bool:\n","        if any(l.member_id == member_id and l.returned_date is None for l in self.loans):\n","            raise ValueError(\"Cannot delete member with active loans.\")\n","        before = len(self.members)\n","        self.members = [m for m in self.members if m.id != member_id]\n","        # also remove their historical loans\n","        self.loans = [l for l in self.loans if l.member_id != member_id]\n","        self._persist()\n","        return len(self.members) < before\n","\n","    def list_members(self) -> List[Member]:\n","        return list(self.members)\n","\n","    def search_members(self, q: str) -> List[Member]:\n","        q = q.lower().strip()\n","        return [m for m in self.members if q in m.name.lower() or q in m.email.lower()]\n","\n","    def get_member(self, member_id: str) -> Optional[Member]:\n","        return next((m for m in self.members if m.id == member_id), None)\n","\n","    # ---- Loans ----\n","    def issue_book(self, book_id: str, member_id: str, days: int = 14) -> Loan:\n","        if not self.get_book(book_id):\n","            raise ValueError(\"Book not found.\")\n","        if not self.get_member(member_id):\n","            raise ValueError(\"Member not found.\")\n","        if not self._book_available(book_id):\n","            raise ValueError(\"No copies available for this book.\")\n","        loan = Loan(\n","            id=str(uuid4()),\n","            book_id=book_id,\n","            member_id=member_id,\n","            date_borrowed=self._today(),\n","            due_date=self._in_days(days),\n","            returned_date=None,\n","        )\n","        self.loans.insert(0, loan)\n","        self._persist()\n","        return loan\n","\n","    def return_book(self, loan_id: str) -> Loan:\n","        loan = next((l for l in self.loans if l.id == loan_id), None)\n","        if not loan:\n","            raise ValueError(\"Loan not found.\")\n","        if loan.returned_date:\n","            raise ValueError(\"Book already returned.\")\n","        loan.returned_date = self._today()\n","        self._persist()\n","        return loan\n","\n","    def list_loans(self, include_returned: bool = False) -> List[Loan]:\n","        return [l for l in self.loans if include_returned or l.returned_date is None]\n","\n","    def overdue_loans(self) -> List[Loan]:\n","        today = datetime.now().date()\n","        return [l for l in self.loans if l.returned_date is None and datetime.fromisoformat(l.due_date).date() < today]\n","\n","    # ---- Stats ----\n","    def stats(self) -> Dict[str, Any]:\n","        total_copies = sum(b.copies for b in self.books)\n","        on_loan = sum(1 for l in self.loans if l.returned_date is None)\n","        return {\n","            \"titles\": len(self.books),\n","            \"total_copies\": total_copies,\n","            \"members\": len(self.members),\n","            \"on_loan\": on_loan,\n","            \"available\": total_copies - on_loan,\n","            \"overdue\": len(self.overdue_loans()),\n","        }\n","\n","# --------------------- CLI UI ---------------------\n","\n","def line(char=\"─\", width=60):\n","    return char * width\n","\n","def short_id(uid: str) -> str:\n","    return uid.split(\"-\")[0]\n","\n","def print_books(books: List[Book], lib: Library):\n","    if not books:\n","        print(\"No books found.\")\n","        return\n","    print(line())\n","    print(f\"{'ID':6}  {'Title':30}  {'Author':20}  {'ISBN':13}  {'Copies':6}  {'OnLoan':6}\")\n","    print(line())\n","    for b in books:\n","        onloan = lib._active_loans_for_book(b.id)\n","        print(f\"{short_id(b.id):6}  {b.title[:30]:30}  {b.author[:20]:20}  {b.isbn[:13]:13}  {b.copies:6d}  {onloan:6d}\")\n","    print(line())\n","\n","def print_members(members: List[Member]):\n","    if not members:\n","        print(\"No members found.\")\n","        return\n","    print(line())\n","    print(f\"{'ID':6}  {'Name':25}  {'Email':30}\")\n","    print(line())\n","    for m in members:\n","        print(f\"{short_id(m.id):6}  {m.name[:25]:25}  {m.email[:30]:30}\")\n","    print(line())\n","\n","def print_loans(loans: List[Loan], lib: Library):\n","    if not loans:\n","        print(\"No loans.\")\n","        return\n","    print(line())\n","    print(f\"{'LoanID':6}  {'Book':30}  {'Member':20}  {'Borrowed':10}  {'Due':10}  {'Returned':10}  {'Status'}\")\n","    print(line())\n","    for l in loans:\n","        b = lib.get_book(l.book_id)\n","        m = lib.get_member(l.member_id)\n","        overdue = (not l.returned_date) and datetime.fromisoformat(l.due_date).date() < datetime.now().date()\n","        status = \"OVERDUE\" if overdue else (\"Returned\" if l.returned_date else \"On Loan\")\n","        print(f\"{short_id(l.id):6}  { (b.title if b else '??')[:30]:30}  {(m.name if m else '??')[:20]:20}  \"\n","              f\"{l.date_borrowed:10}  {l.due_date:10}  {(l.returned_date or '-')[:10]:10}  {status}\")\n","    print(line())\n","\n","def seed_if_empty(lib: Library):\n","    if not lib.books:\n","        lib.add_book(\"Clean Code\", \"Robert C. Martin\", \"9780132350884\", copies=3)\n","        lib.add_book(\"The Pragmatic Programmer\", \"Andrew Hunt\", \"9780201616224\", copies=2)\n","    if not lib.members:\n","        lib.add_member(\"Asha\", \"asha@example.com\")\n","        lib.add_member(\"Rahul\", \"rahul@example.com\")\n","\n","def menu():\n","    storage = Storage()\n","    lib = Library(storage)\n","    seed_if_empty(lib)\n","\n","    ACTIONS = {\n","        \"1\": \"Books\",\n","        \"2\": \"Members\",\n","        \"3\": \"Issue Book\",\n","        \"4\": \"Return Book\",\n","        \"5\": \"Loans\",\n","        \"6\": \"Stats\",\n","        \"0\": \"Exit\",\n","    }\n","\n","    while True:\n","        print(\"\\n📚 Library Management System\")\n","        print(line())\n","        for k in [\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"0\"]:\n","            print(f\"{k}. {ACTIONS[k]}\")\n","        choice = input(\"\\nChoose an option: \").strip()\n","\n","        try:\n","            if choice == \"1\":\n","                books_menu(lib)\n","            elif choice == \"2\":\n","                members_menu(lib)\n","            elif choice == \"3\":\n","                issue_menu(lib)\n","            elif choice == \"4\":\n","                return_menu(lib)\n","            elif choice == \"5\":\n","                loans_menu(lib)\n","            elif choice == \"6\":\n","                s = lib.stats()\n","                print(\"\\n📊 Stats\")\n","                print(line())\n","                for k, v in s.items():\n","                    print(f\"{k.capitalize():12}: {v}\")\n","                print(line())\n","            elif choice == \"0\":\n","                print(\"Goodbye!\")\n","                break\n","            else:\n","                print(\"Invalid option.\")\n","        except Exception as e:\n","            print(f\"⚠️  Error: {e}\")\n","\n","def books_menu(lib: Library):\n","    while True:\n","        print(\"\\n📘 Books\")\n","        print(line())\n","        print(\"1. List all books\")\n","        print(\"2. Search books\")\n","        print(\"3. Add book\")\n","        print(\"4. Delete book\")\n","        print(\"0. Back\")\n","        c = input(\"Choose: \").strip()\n","        if c == \"1\":\n","            print_books(lib.list_books(), lib)\n","        elif c == \"2\":\n","            q = input(\"Search by title/author/ISBN: \")\n","            print_books(lib.search_books(q), lib)\n","        elif c == \"3\":\n","            title = input(\"Title: \").strip()\n","            author = input(\"Author: \").strip()\n","            isbn = input(\"ISBN: \").strip()\n","            copies = int(input(\"Copies (>=1): \").strip() or \"1\")\n","            b = lib.add_book(title, author, isbn, copies)\n","            print(f\"Added book: {b.title} ({short_id(b.id)})\")\n","        elif c == \"4\":\n","            sid = input(\"Enter book short ID to delete: \").strip()\n","            book_id = resolve_short_id(sid, lib.books)\n","            if not book_id:\n","                print(\"Book not found.\")\n","            else:\n","                lib.remove_book(book_id)\n","                print(\"Deleted.\")\n","        elif c == \"0\":\n","            return\n","        else:\n","            print(\"Invalid.\")\n","\n","def members_menu(lib: Library):\n","    while True:\n","        print(\"\\n🧑 Members\")\n","        print(line())\n","        print(\"1. List members\")\n","        print(\"2. Search members\")\n","        print(\"3. Add member\")\n","        print(\"4. Delete member\")\n","        print(\"0. Back\")\n","        c = input(\"Choose: \").strip()\n","        if c == \"1\":\n","            print_members(lib.list_members())\n","        elif c == \"2\":\n","            q = input(\"Search by name/email: \")\n","            print_members(lib.search_members(q))\n","        elif c == \"3\":\n","            name = input(\"Name: \").strip()\n","            email = input(\"Email: \").strip()\n","            m = lib.add_member(name, email)\n","            print(f\"Added member: {m.name} ({short_id(m.id)})\")\n","        elif c == \"4\":\n","            sid = input(\"Enter member short ID to delete: \").strip()\n","            member_id = resolve_short_id(sid, lib.members)\n","            if not member_id:\n","                print(\"Member not found.\")\n","            else:\n","                lib.remove_member(member_id)\n","                print(\"Deleted.\")\n","        elif c == \"0\":\n","            return\n","        else:\n","            print(\"Invalid.\")\n","\n","def loans_menu(lib: Library):\n","    while True:\n","        print(\"\\n📄 Loans\")\n","        print(line())\n","        print(\"1. List active loans\")\n","        print(\"2. List all loans (incl. returned)\")\n","        print(\"3. Overdue loans\")\n","        print(\"0. Back\")\n","        c = input(\"Choose: \").strip()\n","        if c == \"1\":\n","            print_loans(lib.list_loans(False), lib)\n","        elif c == \"2\":\n","            print_loans(lib.list_loans(True), lib)\n","        elif c == \"3\":\n","            print_loans(lib.overdue_loans(), lib)\n","        elif c == \"0\":\n","            return\n","        else:\n","            print(\"Invalid.\")\n","\n","def issue_menu(lib: Library):\n","    print(\"\\n🆕 Issue Book\")\n","    print_books(lib.list_books(), lib)\n","    sid_b = input(\"Enter book short ID: \").strip()\n","    book_id = resolve_short_id(sid_b, lib.books)\n","    if not book_id:\n","        print(\"Book not found.\")\n","        return\n","\n","    print_members(lib.list_members())\n","    sid_m = input(\"Enter member short ID: \").strip()\n","    member_id = resolve_short_id(sid_m, lib.members)\n","    if not member_id:\n","        print(\"Member not found.\")\n","        return\n","\n","    days = int(input(\"Days until due (default 14): \").strip() or \"14\")\n","    loan = lib.issue_book(book_id, member_id, days)\n","    b = lib.get_book(book_id)\n","    m = lib.get_member(member_id)\n","    print(f\"Issued '{b.title}' to {m.name}. Due on {loan.due_date}. LoanID: {short_id(loan.id)}\")\n","\n","def return_menu(lib: Library):\n","    print(\"\\n↩️  Return Book\")\n","    print_loans(lib.list_loans(False), lib)\n","    sid = input(\"Enter Loan short ID to return: \").strip()\n","    loan_id = resolve_short_id(sid, lib.loans)\n","    if not loan_id:\n","        print(\"Loan not found.\")\n","        return\n","    loan = lib.return_book(loan_id)\n","    b = lib.get_book(loan.book_id)\n","    print(f\"Returned '{b.title}'. Thank you!\")\n","\n","def resolve_short_id(short: str, items: List[Any]) -> Optional[str]:\n","    short = short.strip().lower()\n","    matches = [getattr(x, \"id\") for x in items if getattr(x, \"id\").split(\"-\")[0].lower() == short]\n","    if len(matches) == 1:\n","        return matches[0]\n","    return None\n","\n","# --------------------- Entry ---------------------\n","\n","if __name__ == \"__main__\":\n","    try:\n","        menu()\n","    except KeyboardInterrupt:\n","        print(\"\\nExiting...\")\n","        sys.exit(0)\n"],"metadata":{"id":"fXrriWPAvH9a","outputId":"74005fb2-cbce-418f-808d-10d54549db96","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"metadata":{"tags":null},"name":"stdout","output_type":"stream","text":["\n","📚 Library Management System\n","────────────────────────────────────────────────────────────\n","1. Books\n","2. Members\n","3. Issue Book\n","4. Return Book\n","5. Loans\n","6. Stats\n","0. Exit\n"]}]}]}