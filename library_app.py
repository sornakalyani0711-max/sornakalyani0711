{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1Nd5me9KI3_klvMG6fvbNXWOLG9Ue3E4v","timestamp":1757238240241},{"file_id":"1r1faap6VWvwA2ZzkuO9unL-kA5vBi3MY","timestamp":1757236239698}],"authorship_tag":"ABX9TyMG9wkSN+OugAwQ6vin3FuV"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import os\n","import pickle\n","\n","class Book:\n","    def __init__(self, book_id, title, author, copies):\n","        self.book_id = book_id\n","        self.title = title\n","        self.author = author\n","        self.copies = copies\n","\n","    def __str__(self):\n","        return f\"{self.book_id}: {self.title} by {self.author} (Copies: {self.copies})\"\n","\n","class Member:\n","    def __init__(self, member_id, name):\n","        self.member_id = member_id\n","        self.name = name\n","        self.borrowed_books = []\n","\n","    def __str__(self):\n","        return f\"{self.member_id}: {self.name} (Borrowed: {', '.join(self.borrowed_books) if self.borrowed_books else 'None'})\"\n","\n","class Library:\n","    def __init__(self, books_file='books.pkl', members_file='members.pkl'):\n","        self.books_file = books_file\n","        self.members_file = members_file\n","        self.books = self.load_data(self.books_file)\n","        self.members = self.load_data(self.members_file)\n","\n","    def load_data(self, filename):\n","        if os.path.exists(filename):\n","            with open(filename, 'rb') as f:\n","                return pickle.load(f)\n","        return {}\n","\n","    def save_data(self, filename, data):\n","        with open(filename, 'wb') as f:\n","            pickle.dump(data, f)\n","\n","    def add_book(self, book):\n","        if book.book_id in self.books:\n","            print(\"Book ID already exists.\")\n","        else:\n","            self.books[book.book_id] = book\n","            self.save_data(self.books_file, self.books)\n","            print(\"Book added.\")\n","\n","    def add_member(self, member):\n","        if member.member_id in self.members:\n","            print(\"Member ID already exists.\")\n","        else:\n","            self.members[member.member_id] = member\n","            self.save_data(self.members_file, self.members)\n","            print(\"Member added.\")\n","\n","    def borrow_book(self, member_id, book_id):\n","        try:\n","            member = self.members[member_id]\n","            book = self.books[book_id]\n","            if book.copies > 0:\n","                book.copies -= 1\n","                member.borrowed_books.append(book.title)\n","                self.save_data(self.books_file, self.books)\n","                self.save_data(self.members_file, self.members)\n","                print(f\"{member.name} borrowed '{book.title}'.\")\n","            else:\n","                print(\"No copies available.\")\n","        except KeyError as e:\n","            print(f\"Error: {str(e)} not found.\")\n","\n","    def return_book(self, member_id, book_id):\n","        try:\n","            member = self.members[member_id]\n","            book = self.books[book_id]\n","            if book.title in member.borrowed_books:\n","                book.copies += 1\n","                member.borrowed_books.remove(book.title)\n","                self.save_data(self.books_file, self.books)\n","                self.save_data(self.members_file, self.members)\n","                print(f\"{member.name} returned '{book.title}'.\")\n","            else:\n","                print(\"Book not borrowed by member.\")\n","        except KeyError as e:\n","            print(f\"Error: {str(e)} not found.\")\n","\n","    def display_books(self):\n","        for book in self.books.values():\n","            print(book)\n","\n","    def display_members(self):\n","        for member in self.members.values():\n","            print(member)\n","\n","def main():\n","    library = Library()\n","    while True:\n","        print(\"\\n--- Library Management ---\")\n","        print(\"1. Add Book\")\n","        print(\"2. Add Member\")\n","        print(\"3. Borrow Book\")\n","        print(\"4. Return Book\")\n","        print(\"5. Display Books\")\n","        print(\"6. Display Members\")\n","        print(\"0. Exit\")\n","        choice = input(\"Enter choice: \")\n","        try:\n","            if choice == '1':\n","                book_id = input(\"Book ID: \")\n","                title = input(\"Title: \")\n","                author = input(\"Author: \")\n","                copies = int(input(\"Copies: \"))\n","                library.add_book(Book(book_id, title, author, copies))\n","            elif choice == '2':\n","                member_id = input(\"Member ID: \")\n","                name = input(\"Name: \")\n","                library.add_member(Member(member_id, name))\n","            elif choice == '3':\n","                member_id = input(\"Member ID: \")\n","                book_id = input(\"Book ID: \")\n","                library.borrow_book(member_id, book_id)\n","            elif choice == '4':\n","                member_id = input(\"Member ID: \")\n","                book_id = input(\"Book ID: \")\n","                library.return_book(member_id, book_id)\n","            elif choice == '5':\n","                library.display_books()\n","            elif choice == '6':\n","                library.display_members()\n","            elif choice == '0':\n","                break\n","            else:\n","                print(\"Invalid choice.\")\n","        except Exception as e:\n","            print(\"An error occurred:\", e)\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h5BNcrf2jZp2","outputId":"f18f8ec1-015e-4dc0-86bb-bfce2e1f389a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","--- Library Management ---\n","1. Add Book\n","2. Add Member\n","3. Borrow Book\n","4. Return Book\n","5. Display Books\n","6. Display Members\n","0. Exit\n"]}]}]}